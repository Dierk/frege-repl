module frege.repl.FregeRepl where

import Compiler.Data
import Compiler.Import
import frege.Version
import Java.Net
import Data.List
import Interpreter.FregeScriptCompiler hiding(compile)
import Interpreter.FregeInterpreter
import Compiler.Utilities as U()
import Compiler.EclipseUtil as EU()
import Compiler.DocUtils as DU(docit, docSym, DL, Doc, emitHtml)
import Java.Swing (JFrame, invokeLater)
import Java.Awt (Component, ActionListener)
import Repl.Gui

data ReplState = ReplState {
    lastExternalScript :: Maybe String,
    lastJavaSource :: Maybe String,
    prompt :: String
}

data Repl a = Repl {un :: StateT ReplState Interpreter a} where
    get = Repl $ StateT (\s -> return (s, s)) 
    put s = Repl $ StateT (\_ -> return ((), s))
    modify f = Repl $ StateT (\s -> return ((), f s))
    run repl state = evalStateT (Repl.un repl) state

instance Monad Repl where
    return = Repl . return
    (Repl x) >>= f = Repl $ x >>= (\y -> Repl.un $ f y)
    
instance MonadIO Repl where
    liftIO = Repl . lift . liftIO

data ReplResult = ReplError [String] | ReplSuccess String | NoOutput

repl :: ConsoleReader -> Repl ()
repl console = do
  state <- Repl.get
  liftIO $ console.println ""
  line <- liftIO $ console.readLine state.prompt
  let cmd = Command.parse line
  let evalLoop cmd = evalScript cmd >>= printResult console >> repl console
  case cmd of
    Left err -> liftIO (console.println err) >> repl console
    Right cmd -> case cmd of
        DefMulti -> readPasteScript console "" "" >>= (evalLoop . Eval)
        Quit -> return ()
        cmd -> evalLoop cmd

evalScript :: Command -> Repl ReplResult
evalScript (Eval line) = do
    oldInterpState <- Repl . lift $ Interpreter.get
    fregecRes <- Repl . lift $ compile line
    case fregecRes of
        CompilationSuccess (c@CompilationInfo{javaSource=javaSrc, sourceInfo=sourceInfo,state=g}) -> do
            Repl.modify $ ReplState.{lastJavaSource = Just javaSrc}
            case sourceInfo of
                Module -> return $ ReplSuccess $ "Loaded module: " ++ modName where
                    modName = moduleName g
                Definitions -> do
                    tate <- Repl.get
                    s <- Repl . lift $ Interpreter.get
                    Repl . lift . Interpreter.put $ s.{currentScript <- (++ newLine ++ line)}
                    return NoOutput
                Expression{variableName=var} -> do
                    res <- Repl . lift $ showVariable line var g
                    Repl . lift $ Interpreter.put oldInterpState
                    case res of
                        Left err -> return $ ReplError err
                        Right str -> return $ ReplSuccess str
        CompilationFailure err -> return $ ReplError err

evalScript (BrowseModule m) = do
    let moduleName = trim m
    replState <- Repl.get
    state <- Repl . lift $ Interpreter.get
    javac <- liftIO $ MemoryJavaCompiler.new state.loader state.classes
    loader <- liftIO $ javac.classLoader
    global <- liftIO $ standardOptions loader
    let res = outlineModule moduleName global
    return . ReplSuccess $ intercalate newLine res
    
evalScript Browse = do
    state <- Repl . lift $ Interpreter.get
    interpreterState <- Repl . lift $ Interpreter.get
    if isEmpty . trim $ interpreterState.currentScript then
        return NoOutput
    else
        evalScript $ BrowseModule state.moduleName

evalScript (Type expr) = do
  state <- Repl . lift $ Interpreter.get
  javac <- liftIO $ MemoryJavaCompiler.new state.loader state.classes
  loader <- liftIO $ javac.classLoader
  global <- liftIO $ standardOptions loader
  let typeOfExpr = Repl . lift . interpret $ state
      interpret replState = do
        oldState <- Interpreter.get
        typeOfExpression <- typeOfExpression expr
        Interpreter.put oldState
        case typeOfExpression of
            Right typ -> return $ ReplSuccess typ
            Left errs -> return $ ReplError errs
  maybe typeOfExpr (return . ReplSuccess . flip getSymbolType global) $ lookupVarSymbol global.thisTab expr
  

evalScript (Load (urlSpec@#.*?://#)) = do
    urle <- liftIO $ URL.new urlSpec
    let update res = case res of
            ReplSuccess message -> updateExternalScript urlSpec >> return res
            otherwise -> return res
    evalURL urle >>= update
    
evalScript (Load filePath) = do
    scriptMay <- liftIO $ safeSlurp filePath
    case scriptMay of 
        Right script -> do
            res <- evalScript $ Eval script
            case res of
                ReplSuccess _ -> do
                    updateExternalScript filePath
                    return res
                _ -> return res
        Left err -> return $ ReplError [err]

evalScript Java = do
  state <- Repl.get
  showgui s = liftIO $ Runnable.new (javaSourceGUI s) >>= invokeLater >> return NoOutput
  maybe (return NoOutput) showgui state.lastJavaSource

evalScript Reload = do
    state <- Repl.get
    case state.lastExternalScript of
        Just extScript -> evalScript (Load extScript)
        Nothing -> return NoOutput --Nothing to reload 
            
evalScript History = do
    interpreterState <- Repl . lift $ Interpreter.get
    return $ ReplSuccess interpreterState.currentScript
    
evalScript Reset = do
    Repl.put initReplState
    initInterpreterState <- liftIO initInterpreterState
    Repl . lift $ Interpreter.put initInterpreterState
    return NoOutput

evalScript Skip = return NoOutput
evalScript Help = return $ ReplSuccess help

evalScript (HelpDoc source) = do
  fregecRes <- Repl . lift $ compile "\"\"" -- Import current definitions
  let response = maybe (return errmsg) (\m -> liftIO (gui m) >> return NoOutput)
      errmsg = ReplError [source ++ " cannot be resolved!"]
      gui content = invokeLater =<< Runnable.new (helpGUI source content)
  case fregecRes of
    CompilationSuccess (c@CompilationInfo{state=global}) -> oneof [helpdoc, packDoc] where
       helpdoc = fst $ StG.run (helpDoc source) global
       packDoc = fst $ StG.run (packDocumentation source) global
       oneof =  response . listToMaybe . catMaybes
    _ -> response $ Just ""

evalScript Version = Repl.get >>= (\s -> return $ ReplSuccess version)
evalScript DefMulti = return NoOutput
evalScript Quit = return NoOutput

sNameToQName sName = do
  g <- getST
  qNames <- U.resolve (VName g.thisPack) Position.null sName
  return (listToMaybe qNames)  -- Just taking first resolved

helpDoc :: String -> StG (Maybe String)
helpDoc source = do
  global <- getST
  qNameMay <- sNameToQName (createSName source)
  let symMay = qNameMay >>= (\qname -> qname.findit global)
  maybe (return Nothing) (\sym -> symbolDocumentation sym >>= return . Just) symMay

createSName s
  | Just (Just ns : Just ty : Just id : _) <- s `match` #^(.*)\.(.*)\.(\p{Lu}.*)$# = with2con ns ty id
  | Just (Just ns : Just ty : Just id : _) <- s `match` #^(.*)\.(.*)\.(.*)$#       = with2var ns ty id
  | Just (Just ty : Just id : _)           <- s `match` #^(.*)\.(\p{Lu}.*)$#       = with1con ty id
  | Just (Just ty : Just id : _)           <- s `match` #^(.*)\.(.*)$#             = with1var ty id
  | s ~ #^\p{Lu}.*$#                                                               = Simple (Token CONID s 1 0 0 [])
  | otherwise                                                                      = Simple (Token VARID s 1 0 0 [])
     where with2con ns ty id = With2 (qual ns) (qual ty) (con id)
           with2var ns ty id = With2 (qual ns) (qual ty) (var id)
           with1con ty id = With1 (qual ty) (con id)
           with1var ty id = With1 (qual ty) (var id)
           qual name = Token QUALIFIER name 1 0 0 []
           con name = Token CONID name 1 0 0 []
           var name = Token VARID name 1 0 0 []

symbolDocumentation :: Symbol -> StG String
symbolDocumentation sym = do
    sw <-  doio $  StringWriter.new ()
    p  <-  doio $  StringWriter.printer sw
    changeST Global.{gen <- GenSt.{printer=p}}
    g <- getST
    let ds = docSym g sym
        dl = DL (Just "func") [ds]
        doc = Doc [dl]
    emitHtml false doc      -- html without CSS, swing does not understand
    doio $ g.printer.close
    result <- doio $ sw.toString
    return result

packDocumentation :: String -> StG (Maybe String)
packDocumentation pack = do
    g <- getST
    r <- getFP pack
    case r of
        Right (Just fp) -> case fp.doc of
            ""   -> return . Just $ ("Undocumented package " ++ pack)
            text -> do
                let doc = Doc $ docit g (Just text)
                sw <-  doio $  StringWriter.new ()
                p  <-  doio $  StringWriter.printer sw
                changeST Global.{gen <- GenSt.{printer=p}}
                emitHtml false doc      -- html without CSS, swing does not understand
                doio $ g.printer.close
                result <- doio $ sw.toString
                return . Just $ result
        Left ex -> return Nothing
        sonst   -> return . Just $ ("(java class?) " ++ pack)

match s regex = groups <$> s =~ regex where groups m = [m.group i | i <- [1..groupCount m]]

pure native groupCount :: Matcher -> Int

ioException :: IOException -> Repl ReplResult    
ioException e = return $ ReplError [Throwable.getMessage e]

evalURL :: URL -> Repl ReplResult
evalURL url = do
    replState <- Repl.get
    let contents = fetch `catch` handleIOE
        fetch = urlContents url >>= (return . Right)
        handleIOE :: IOException -> IO (Either String Script)
        handleIOE ioe = return $ Left ioe.getMessage
    scriptMay <- liftIO contents
    case scriptMay of 
        Right script -> evalScript $ Eval script
        Left err -> return $ ReplError [err]
        
evalShow :: Script -> Interpreter (Either [String] String)
evalShow source = do
  fregecRes <- compile source
  case fregecRes of
    CompilationSuccess (c@CompilationInfo{sourceInfo=sourceInfo,state=g}) ->
        case sourceInfo of
            Module -> return $ Left ["Not an expression!"]
            Definitions -> return $ Left ["Not an expresssion!"]
            Expression{variableName=var} -> showVariable source var g
    CompilationFailure err -> return $ Left err

showVariable source var g = do
      let symbolMay = lookupVarSymbol g.thisTab var
      case symbolMay of
        Nothing -> return . Left $ ["Not found: " ++ var]
        Just symbol -> showSymbol source var symbol g

showSymbol source var symbol g | isVariable g symbol = do
    state <- Interpreter.get
    if isString g symbol then do
        v <- liftIO $ fieldValue state.moduleName var g.sub.loader
        case v of
            Left err -> return $ Left [err.getMessage]
            Right value -> return . Right $ toString value
    else do
        Interpreter.put $ state.{currentScript <- (++ newLine ++ (variableDeclScript var source))}
        let showScript = buildShowScript var g symbol
        showResult <- evalShow showScript
        return showResult
showSymbol _ _ symbol g = return . Right $ getSymbolType symbol g

native fieldValue frege.memoryjavac.JavaUtils.fieldValue :: 
  String -> String -> ClassLoader -> IO (Either ScriptException Object)

updateExternalScript script = do
    replState <- Repl.get
    Repl.put $ replState.{lastExternalScript=Just script}
    
moduleName global = show $ sub.thisPack.className global where
    sub = Global.sub global

handleMalformedURLException :: MalformedURLException -> Repl ReplResult   
handleMalformedURLException malformed = return $ ReplError [malformed.getMessage]

readPasteScript :: ConsoleReader -> String -> String -> Repl String
readPasteScript _ ":}" !acc = return acc
readPasteScript console curr !acc = do
    line <- liftIO $ console.readLine ""
    readPasteScript console line (acc ++ newLine ++ curr)

outlineModule pack g = fst $ State.run (outlineModule' pack)  g where
    outlineModule' pack = do
        let p = Pack.new pack
        importClass Position.null p
        g <- getST
        case g.packages.lookup p of
            Nothing -> return []
            Just env -> return $ map (EU.label g) $ EU.symbols env
        
positionAndName a b = case Symbol.pos a <=> Symbol.pos b of
                                    Eq -> comparing (QName.base • Symbol.name) a b
                                    ne -> ne 
        
cmdHelp = [(":type <expression>", "Display the type of an expression."),
            (":browse <module name>", "Display the names in a module if " ++
                "a module name is provided otherwise display the names in the default REPL module."),
            (":load <url or file>", "Load Frege code snippets from an URL or file."),
            (":java", "View Java translation of last compiled Frege source."),
            (":r", "Reload the last script file."),
            (":history", "Display the source history for definitions in the default REPL module."),
            (":reset", "Reset the session discarding all evaluated scripts."),
            (":version", "Display Frege version."),
            (":{", "Start multiline definitions."),
            (":}", "End multiline defintions."),
            (":help <name>", "Display the documentation for the given name." ++
                            " If the name is not provided, display this help message."),
            (":q or :quit", "Quit REPL")]
            
f `on` g = \x \y -> f (g x) (g y)

renderCmdHelp cmdHelp = map render cmdHelp where
    maxLeftIndent = length . fst $ maximumBy (compare `on` (length . fst)) cmdHelp
    indent cmd desc width = cmd ++ (concat $ replicate (width - cmd.length) " ") ++
        " - " ++ desc
    render (cmd, desc) = indent cmd desc maxLeftIndent
        
help = intercalate newLine $ header ++ body where
    header = ["At the prompt, you can enter Frege code snippets to get them evaluated.",
            "The output or compilation errors will be printed below the prompt.",
            "In addition to Frege code, the following commands are supported:\n"]
    body = renderCmdHelp cmdHelp
  
runFile :: String -> Repl ()
runFile filePath = do
    scriptMay <- liftIO $ safeSlurp filePath
    case scriptMay of 
        Right script -> do
            fregecRes <- Repl . lift $ compile script
            case fregecRes of
                -- The script is a set of definitions
                CompilationSuccess (c@CompilationInfo{sourceInfo=sourceInfo,state=g}) ->
                    case sourceInfo of
                        Module -> liftIO $ invokeMain modName g.sub.loader where
                            modName = moduleName g
                        Definitions -> return ()
                        Expression{variableName=var} -> do
                            res <- Repl . lift $ evalShow script
                            case res of
                                Left err -> liftIO $ println err
                                Right str -> liftIO $ println str
                CompilationFailure err -> liftIO $ println err
        Left err -> liftIO $ println err
        
safeSlurp :: String -> IO (Either String String)        
safeSlurp file = fetch file `catch` handleIOE where
        fetch file = fileContents file >>= (return . Right)
        handleIOE :: IOException -> IO (Either String String)
        handleIOE ioe = return $ Left ioe.getMessage         

data ConsoleReader = mutable native jline.console.ConsoleReader where
  native new :: () -> IO ConsoleReader throws IOException
  native readLine :: ConsoleReader -> String -> IO String throws IOException
  native readLine' readLine :: ConsoleReader -> IO String throws IOException
  native println :: ConsoleReader -> String -> IO () throws IOException
  native setPrompt :: ConsoleReader -> String -> IO ()
  native setExpandEvents :: ConsoleReader -> Bool -> IO ()
  
urlContents url = do
    inStream <- URL.openStream url
    scanner <- Scanner.new inStream
    scanner.useDelimiter "\\Z"
    scanner.next `finally` scanner.close
    
fileContents filePath = do
    file <- File.new filePath
    scanner <- Scanner.fromFile file "utf-8"
    scanner.useDelimiter "\\Z"
    scanner.next `finally` scanner.close

data Scanner = mutable native java.util.Scanner where
    native new :: InputStream -> IO Scanner
    native fromFile new :: MutableIO File -> String -> IO Scanner throws FileNotFoundException
    native useDelimiter :: Scanner -> String -> IO ()
    native next :: Scanner -> IO String   

javaSourceGUI :: String -> IO ()
javaSourceGUI javaSource = do
   frame::JFrame <- JFrame.new "Java Source"
   newContentPane::JPanel <- BorderLayout.new () >>= JPanel.new
   frame.setDefaultCloseOperation JFrame.dispose_on_close
   editor::JEditorPane <- JEditorPane.new "text/plain" javaSource
   editor.setEditable false
   scrollPane <- JScrollPane.new editor
   dimension <- Dimension.new 600 600
   JComponent.setPreferredSize scrollPane dimension
   Container.add newContentPane scrollPane (asObject BorderLayout.center)
   frame.setContentPane newContentPane
   frame.pack
   frame.setVisible true


helpGUI :: String -> String -> IO ()
helpGUI title content = do
    frame <- JFrame.new (title ++ " - Documentation")
    frame.setDefaultCloseOperation JFrame.dispose_on_close
    newContentPane:: JPanel <- BorderLayout.new () >>= JPanel.new
    let html :: String
        html = substring content $ indexOf content "<HTML>" -- Skip DOCTYPE
    editor::JEditorPane <- JEditorPane.new "text/html" html
    editor.setEditable false
    helpLinksListener <- FregeJavaProxy.with showDesktop HyperlinkListener.clazz
    editor.addHyperlinkListener helpLinksListener
    scrollPane <- JScrollPane.new editor
    dimension <- Dimension.new 600 600
    JComponent.setPreferredSize scrollPane dimension
    Container.add newContentPane scrollPane (asObject BorderLayout.center)
    newContentPane.setOpaque true
    frame.setContentPane newContentPane
    frame.pack
    frame.setVisible true

data FregeJavaProxy = pure native frege.memoryjavac.FregeJavaProxy where
  native with frege.memoryjavac.FregeJavaProxy.with :: (Object -> Method -> ObjectArr -> ST s a) -> Class c -> IO c

showDesktop :: Object -> Method -> ObjectArr -> IO ()
showDesktop _ _ args = do
  event <- return $ asHyperlinkEvent $ args.elemAt 0
  d <- Desktop.getDesktop ()
  desktopSupported <- d.isDesktopSupported
  let url = HyperlinkEvent.getURL event
      navigateRelative = either throw d.browse . URI.new $ fixHelpLink event.getDescription
      navigate = maybe navigateRelative (\u -> toURI u >>= d.browse) url
  when (event.getEventType == HyperlinkEvent_EventType.activated) navigate


fixHelpLink (m~#^\.\.(.*)$#) = maybe helpRoot (\s -> helpRoot ++ s) $ m.group 1
fixHelpLink s = s

helpRoot = "http://try.frege-lang.org/doc"

native toURI :: URL -> ST s URI throws URISyntaxException
pure native asObject "(java.lang.Object)" :: a -> Object


pure native isEmpty :: String -> Bool
pure native replaceAll :: String -> String -> String -> String
pure native indexOf :: String -> String -> Int
pure native substring :: String -> Int -> String
                         | String -> Int -> Int -> String

data Command = Version | Help | HelpDoc String | Browse |
    BrowseModule String | Type String | Load String | Eval String |
    Java | DefMulti | History | Reload | Reset | Skip | Quit where
    
    parse   :: String -> Either String Command
    parse s = parse' $ trim s where
        parse' "" = Right Skip
        parse' #^:# = parseCommand s
        parse' script = Right $ Eval script

    parseCommand (m~#:browse\s(.*)#) = maybe (Right Browse) (Right . BrowseModule) $ m.group 1
    parseCommand ":browse" = Right $ Browse
    parseCommand (m~#^:l.*?\s+(.*)#) = 
        maybe (Left "Missing external script path!") (Right . Load) $ m.group 1
    parseCommand  ":version" = Right Version
    parseCommand (m~#:help\s+(.*)#) = maybe (Right Help) (Right . HelpDoc) $ m.group 1
    parseCommand ":help" = Right Help
    parseCommand (m~#^:t.*?\s+(.*)#) =
        maybe (Left "Missing expression!") (Right . Type) $ m.group 1
    parseCommand ":{" = Right DefMulti
    parseCommand ":history" = Right History
    parseCommand ":java" = Right Java
    parseCommand ":r" = Right Reload
    parseCommand ":reset" = Right Reset
    parseCommand ":q" = Right Quit
    parseCommand ":quit" = Right Quit
    parseCommand otherwise = Left "Invalid Command"
    
derive Eq Command
derive Show Command

initReplState :: ReplState
initReplState = ReplState{
    lastExternalScript = Nothing,
    lastJavaSource = Nothing,
    prompt = "frege> " --Default prompt
 }
    
initInterpreterState :: IO InterpreterState 
initInterpreterState = do
  urlarr <- URLArray.new 0
  loader <- ClassLoader.current >>= URLClassLoader.new urlarr
  classes <- HashMap.new ()
  time <- System.currentTimeMillis ()
  let interpreterState = InterpreterState {
      loader = loader,
      classes = classes,
      moduleName = "repl" ++ show time ++ ".Repl",
      currentScript = "",
      transformDefs = id
  }
  return interpreterState

vmVendor = maybe "" id $ System.getProperty "java.vm.vendor"
vmName = maybe "" id $ System.getProperty "java.vm.name"
javaVersion = maybe "" id $ System.getProperty "java.version"

pure native toString :: Object -> String

welcome = "Welcome to Frege " ++ version ++ " (" ++ vmVendor ++ " " ++ vmName ++
    ", " ++ javaVersion ++ ")"

printResult :: ConsoleReader -> ReplResult -> Repl ()
printResult console (ReplError errs) = liftIO $ console.println $ intercalate newLine errs
printResult console (ReplSuccess message) = liftIO $ console.println message
printResult _ NoOutput = return ()

main [file] = do
  interpreterState <- initInterpreterState
  evalInterpreter (Repl.run (runFile file) initReplState) interpreterState
main _ = do
  console <- ConsoleReader.new ()
  console.setPrompt initReplState.prompt
  console.setExpandEvents false
  console.println welcome
  interpreterState <- initInterpreterState
  evalInterpreter (Repl.run (repl console) initReplState) interpreterState
  System.exit 0
