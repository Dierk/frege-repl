module frege.repl.FregeRepl where

import Compiler.Data
import frege.Version
import Java.Net
import Data.List
import Interpreter.FregeInterpreter
import Compiler.Utilities as U()
import Compiler.EclipseUtil as EU()
import Java.Swing (JFrame, invokeLater)
import Java.Awt (Component, ActionListener)
import Repl.Gui
import frege.Prelude hiding (print)
import frege.Prelude (print pPrint)

data ReplState = ReplState {
    lastExternalScript :: Maybe String,
    lastJavaSource :: Maybe String,
    prompt :: String,
    env :: Environment
}

initReplState :: ReplState
initReplState = ReplState {
    lastExternalScript = Nothing,
    lastJavaSource = Nothing,
    prompt = "frege> ", --Default prompt
    env = Environment.default
 }


data ReplResult = ReplResult ReplInfo ReplState

data ReplInfo = EvalError [String]
              | EvalMessage String
              | Def
              | ModuleDef String
              | EvalNoOutput
              | Interpret String String

repl :: ConsoleReader -> ReplState -> IO ()
repl console state = do
  cmd <- read console state
  let res@(ReplResult evalRes newState) = evalScript cmd state
  print console cmd evalRes newState
  loop console cmd res state

read :: ConsoleReader -> ReplState -> IO Command
read console state = do
                       console.println ""
                       line <- console.readLine state.prompt
                       case Command.parse line of
                         Left err -> (console.println err) >> read console state
                         Right DefMulti -> readPasteScript console "" "" >>= (return . Eval)
                         Right cmd -> return cmd

print :: ConsoleReader -> Command -> ReplInfo -> ReplState -> IO ()
print console Java (EvalMessage javaSrc) _       = javaSourceGUI javaSrc
print console (HelpDoc src) (EvalMessage help) _ = helpGUI src help
print console _ (EvalError errs)       _         = console.println $ intercalate newLine errs
print console _ Def                    _         = console.println ""
print console _ (ModuleDef moduleName) _         = console.println $ "Loaded module: " ++ moduleName
print console _ (EvalMessage message)  _         = console.println message
print console _
  (Interpret className var) state                = console.println res where
                                                     value = fieldValue className var state.env.loader
                                                     res = maybe (var ++ " not found!") id value
print _ _ _ _                                    = return ()

loop :: ConsoleReader -> Command -> ReplResult -> ReplState -> IO ()
loop console Quit _ _ = return ()
loop console (Eval _) (ReplResult (Interpret _ _) newState) state =
  repl console state.{lastJavaSource=newState.lastJavaSource}
loop console _ (ReplResult _ newState) state = repl console newState

evalScript :: Command -> ReplState -> ReplResult
evalScript (Eval line) state = case compileWithEnv line state.env of
        CompilationSuccess {javaSource=javaSrc, sourceInfo=sourceInfo,state=g, classLoader=loader} ->
          let newState = state.{lastJavaSource=Just javaSrc,
                                env<-Environment.{loader=loader}
                                   }
          in case sourceInfo of
                Module -> ReplResult (ModuleDef (className g)) newState
                Definitions -> ReplResult EvalNoOutput newState.{
                                  env <- Environment.{predefs <- ((:) line)}}
                Expression{variableName=var} -> showVariable var line newState g
        CompilationFailure compilerState -> ReplResult (EvalError (showMessages compilerState)) state

evalScript (BrowseModule moduleName) state = ReplResult res state where
  global = extractGlobal state.env.loader
  res = EvalMessage . intercalate newLine $ outlineModule moduleName global

evalScript Browse state = case compileWithEnv "\"\"" state.env of
  CompilationSuccess {state=g} -> evalScript (BrowseModule $ className g) state
  CompilationFailure compilerState -> ReplResult (EvalError (showMessages compilerState)) state

evalScript (Type expr) state = case compileWithEnv expr state.env of
   CompilationSuccess {sourceInfo=Expression{variableName=var},state=g, classLoader=loader} ->
      ReplResult res state where
          res = maybe (EvalError ["Not an expression!"]) (\s -> EvalMessage $ getSymbolType s g) symMaybe
          symMaybe = lookupVarSymbol g.thisTab var
   CompilationSuccess {state=g}                         -> ReplResult EvalNoOutput state
   CompilationFailure compilerState -> ReplResult (EvalError (showMessages compilerState)) state

evalScript Java state = ReplResult res state where
 res = maybe EvalNoOutput EvalMessage state.lastJavaSource

evalScript History state = ReplResult (EvalMessage $ unlines state.env.predefs) state

evalScript Reset _ = ReplResult EvalNoOutput initReplState

evalScript (HelpDoc source) state
 | CompilationSuccess {state=g} <- compileWithEnv "\"\"" state.env =
      let res = maybe (EvalError [source ++ "cannot be resolved!"]) EvalMessage (helpDoc source g) in ReplResult res state
 | otherwise      = ReplResult (EvalError ["Internal Error!"]) state


evalScript Version state = ReplResult (EvalMessage version) state
evalScript Help state = ReplResult (EvalMessage help) state
evalScript _ state = ReplResult EvalNoOutput state

showVariable var source state g = maybe evalError showSym $ lookupVarSymbol g.thisTab var where
  evalError = ReplResult (EvalError [var ++ " cannot be resolved!"]) state
  showSym = showSymbol source state var g

showSymbol source state var g symbol
  | isVariable g symbol = if isString g symbol then ReplResult (Interpret (className g) var) state
                          else evalScript (Eval showScript) newState
  | otherwise           = ReplResult (EvalMessage $ getSymbolType symbol g) state
    where
         newState = state.{env <- Environment.{predefs <- ((:) (variableDeclScript var source))}}
         showScript = buildShowScript var g symbol

readPasteScript :: ConsoleReader -> String -> String -> IO String
readPasteScript _ ":}" !acc = return acc
readPasteScript console curr !acc = do
    line <- console.readLine ""
    readPasteScript console line (acc ++ newLine ++ curr)

positionAndName a b = case Symbol.pos a <=> Symbol.pos b of
                                    Eq -> comparing (QName.base â€¢ Symbol.name) a b
                                    ne -> ne

cmdHelp = [(":type <expression>", "Display the type of an expression."),
            (":browse <module name>", "Display the names in a module if " ++
                "a module name is provided otherwise display the names in the default REPL module."),
            (":load <url or file>", "Load Frege code snippets from an URL or file."),
            (":java", "View Java translation of last compiled Frege source."),
            (":r", "Reload the last script file."),
            (":history", "Display the source history for definitions in the default REPL module."),
            (":reset", "Reset the session discarding all evaluated scripts."),
            (":version", "Display Frege version."),
            (":{", "Start multiline definitions."),
            (":}", "End multiline defintions."),
            (":help <name>", "Display the documentation for the given name." ++
                            " If the name is not provided, display this help message."),
            (":q or :quit", "Quit REPL")]

f `on` g = \x \y -> f (g x) (g y)

renderCmdHelp cmdHelp = map render cmdHelp where
    maxLeftIndent = length . fst $ maximumBy (compare `on` (length . fst)) cmdHelp
    indent cmd desc width = cmd ++ (concat $ replicate (width - cmd.length) " ") ++
        " - " ++ desc
    render (cmd, desc) = indent cmd desc maxLeftIndent

help = intercalate newLine $ header ++ body where
    header = ["At the prompt, you can enter Frege code snippets to get them evaluated.",
            "The output or compilation errors will be printed below the prompt.",
            "In addition to Frege code, the following commands are supported:\n"]
    body = renderCmdHelp cmdHelp


safeSlurp :: String -> IO (Either String String)
safeSlurp file = fetch file `catch` handleIOE where
        fetch file = fileContents file >>= (return . Right)
        handleIOE :: IOException -> IO (Either String String)
        handleIOE ioe = return $ Left ioe.getMessage

data ConsoleReader = mutable native jline.console.ConsoleReader where
  native new :: () -> IO ConsoleReader throws IOException
  native readLine :: ConsoleReader -> String -> IO String throws IOException
  native readLine' readLine :: ConsoleReader -> IO String throws IOException
  native println :: ConsoleReader -> String -> IO () throws IOException
  native setPrompt :: ConsoleReader -> String -> IO ()
  native setExpandEvents :: ConsoleReader -> Bool -> IO ()

urlContents url = do
    inStream <- URL.openStream url
    scanner <- Scanner.new inStream
    scanner.useDelimiter "\\Z"
    scanner.next `finally` scanner.close

fileContents filePath = do
    file <- File.new filePath
    scanner <- Scanner.fromFile file "utf-8"
    scanner.useDelimiter "\\Z"
    scanner.next `finally` scanner.close

data Scanner = mutable native java.util.Scanner where
    native new :: InputStream -> IO Scanner
    native fromFile new :: MutableIO File -> String -> IO Scanner throws FileNotFoundException
    native useDelimiter :: Scanner -> String -> IO ()
    native next :: Scanner -> IO String

javaSourceGUI :: String -> IO ()
javaSourceGUI javaSource = do
   frame::JFrame <- JFrame.new "Java Source"
   newContentPane::JPanel <- BorderLayout.new () >>= JPanel.new
   frame.setDefaultCloseOperation JFrame.dispose_on_close
   editor::JEditorPane <- JEditorPane.new "text/plain" javaSource
   editor.setEditable false
   scrollPane <- JScrollPane.new editor
   dimension <- Dimension.new 600 600
   JComponent.setPreferredSize scrollPane dimension
   Container.add newContentPane scrollPane (asObject BorderLayout.center)
   frame.setContentPane newContentPane
   frame.pack
   frame.setVisible true


helpGUI :: String -> String -> IO ()
helpGUI title content = do
    frame <- JFrame.new (title ++ " - Documentation")
    frame.setDefaultCloseOperation JFrame.dispose_on_close
    newContentPane:: JPanel <- BorderLayout.new () >>= JPanel.new
    let html :: String
        html = substring content $ indexOf content "<HTML>" -- Skip DOCTYPE
    editor::JEditorPane <- JEditorPane.new "text/html" html
    editor.setEditable false
    helpLinksListener <- FregeJavaProxy.with showDesktop HyperlinkListener.clazz
    editor.addHyperlinkListener helpLinksListener
    scrollPane <- JScrollPane.new editor
    dimension <- Dimension.new 600 600
    JComponent.setPreferredSize scrollPane dimension
    Container.add newContentPane scrollPane (asObject BorderLayout.center)
    newContentPane.setOpaque true
    frame.setContentPane newContentPane
    frame.pack
    frame.setVisible true

data FregeJavaProxy = pure native frege.memoryjavac.FregeJavaProxy where
  native with frege.memoryjavac.FregeJavaProxy.with :: (Object -> Method -> ObjectArr -> ST s a) -> Class c -> IO c

showDesktop :: Object -> Method -> ObjectArr -> IO ()
showDesktop _ _ args = do
  event <- return $ asHyperlinkEvent $ args.elemAt 0
  d <- Desktop.getDesktop ()
  desktopSupported <- d.isDesktopSupported
  let url = HyperlinkEvent.getURL event
      navigateRelative = either throw d.browse . URI.new $ fixHelpLink event.getDescription
      navigate = maybe navigateRelative (\u -> toURI u >>= d.browse) url
  when (event.getEventType == HyperlinkEvent_EventType.activated) navigate


fixHelpLink s | Just (Just relative : _)
                  <- s `match` #^\.\.(.*)$# = "http://try.frege-lang.org/doc/frege" ++ relative
fixHelpLink s = s

native toURI :: URL -> ST s URI throws URISyntaxException
pure native asObject "(java.lang.Object)" :: a -> Object


pure native isEmpty :: String -> Bool
pure native replaceAll :: String -> String -> String -> String
pure native indexOf :: String -> String -> Int
pure native substring :: String -> Int -> String
                         | String -> Int -> Int -> String

data Command = Version | Help | HelpDoc String | Browse |
    BrowseModule String | Type String | Load String | Eval String |
    Java | DefMulti | History | Reload | Reset | Skip | Quit where

    parse   :: String -> Either String Command
    parse s = parse' $ trim s where
        parse' "" = Right Skip
        parse' #^:# = parseCommand s
        parse' script = Right $ Eval script

    parseCommand s | Just (Just moduleName : _) <- s `match` #:browse\s+(.*)# = Right $ BrowseModule moduleName
    parseCommand s | Just (Just path : _) <- s `match` #^:l.*?\s+(.*)# = Right $ Load path
    parseCommand s | Just (Just src : _) <- s `match` #:help\s+(.*)# = Right $ HelpDoc src
    parseCommand s | Just (Just expr : _) <- s `match` #^:t.*?\s+(.*)# = Right $ Type expr
    parseCommand  ":version" = Right Version
    parseCommand ":browse" = Right $ Browse
    parseCommand ":{" = Right DefMulti
    parseCommand ":history" = Right History
    parseCommand ":java" = Right Java
    parseCommand ":r" = Right Reload
    parseCommand ":reset" = Right Reset
    parseCommand ":q" = Right Quit
    parseCommand ":quit" = Right Quit
    parseCommand ":help" = Right Help
    parseCommand otherwise = Left "Invalid Command"

derive Eq Command
derive Show Command

vmVendor = maybe "" id $ System.getProperty "java.vm.vendor"
vmName = maybe "" id $ System.getProperty "java.vm.name"
javaVersion = maybe "" id $ System.getProperty "java.version"

pure native toString :: Object -> String
pure native trim :: String -> String

welcome = "Welcome to Frege " ++ version ++ " (" ++ vmVendor ++ " " ++ vmName ++
    ", " ++ javaVersion ++ ")"

main _ = do
  console <- ConsoleReader.new ()
  console.setPrompt initReplState.prompt
  console.setExpandEvents false
  console.println welcome
  repl console initReplState
  System.exit 0
