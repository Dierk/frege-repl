module frege.repl.FregeRepl where

import frege.compiler.Data
import frege.compiler.Import
import frege.Version
import frege.java.Net 
import Data.List
import frege.interpreter.FregeInterpreter
import frege.interpreter.FregeScriptCompiler
import frege.compiler.Data(Global)
import frege.compiler.EclipseUtil as EU()
import frege.List as FL (Tree, values)

data ReplState = ReplState {
    lastExternalScript :: Maybe String
}

data Repl a = Repl {un :: StateT ReplState Interpreter a} where
    get = Repl $ StateT (\s -> return (s, s)) --MonadState get, defined here due to the lack of support for FD
    put s = Repl $ StateT (\_ -> return ((), s)) --MonadState put

instance Monad Repl where
    return = Repl . return
    (Repl x) >>= f = Repl $ x >>= (\y -> Repl.un $ f y)
    
instance MonadIO Repl where
    liftIO = Repl . lift . liftIO

liftInterpreter :: Interpreter a -> Repl a    
liftInterpreter = Repl . lift

data ReplResult = ReplError [String] | ReplSuccess String | NoOutput

repl :: ConsoleReader -> Repl ()
repl console = do
  state <- Repl.get
  liftIO $ console.println ""
  line <- liftIO $ console.readLine "frege> "
  let cmd = Command.parse line
  case cmd of
    Left err -> do
        liftIO $ console.println err
        repl console
    Right cmd -> case cmd of
        Paste -> do
            pasteScript <- readPasteScript console "" ""
            res <- evalScript (PasteScript pasteScript)
            printResult console res
            repl console
        Quit -> return ()
        cmd -> do
              res <- evalScript cmd
              printResult console res
              repl console

evalScript :: Command -> Repl ReplResult
evalScript Skip = return NoOutput
evalScript Help = return $ ReplSuccess help
evalScript Version = Repl.get >>= (\s -> return $ ReplSuccess version)

evalScript (List (Just m)) = do
    let moduleName = trim m
    replState <- Repl.get
    state <- liftInterpreter $ Interpreter.get
    global <- liftIO $ standardOptions state.loader
    let res = outlineModule moduleName global
    return . ReplSuccess $ intercalate newLine res
    
evalScript (List Nothing) = do
    replState <- Repl.get
    state <- liftInterpreter $ Interpreter.get
    let script = state.currentScript
    if (isEmpty . trim $ script) then return NoOutput
    else  do
          liftInterpreter . Interpreter.put $ state.{currentScript=""}
          res <- liftInterpreter $ eval script
          liftInterpreter . Interpreter.put $ state.{currentScript=script}
          case res of
            EvalFailure errs -> return $ ReplError errs
            EvalSuccess {compilationInfo=c} -> do
              let g = c.state
              let symList = map (EU.label g) $ EU.symbols g.thisTab
              return $ ReplSuccess $ intercalate newLine symList


evalScript (Type expr) = Repl.get >>= liftInterpreter . interpret where
  interpret replState = do
        typeOfExpression <- typeOfExpression expr
        case typeOfExpression of
            (res, Right typ) -> return $ ReplSuccess typ
            (res, Left errs) -> return $ ReplError errs

evalScript (Load (urlSpec@#.*?://#)) = do
    urle <- liftIO $ URL.new urlSpec
    let updateExternalScript res = case res of
            ReplSuccess message -> do
                replState <- Repl.get
                Repl.put $ replState.{lastExternalScript=Just urlSpec}
                return res
            otherwise -> return res
    either handleMalformedURLException (\url -> evalURL url >>= updateExternalScript) urle
    
evalScript (Load filePath) = do
    scriptMay <- liftIO $ safeSlurp filePath
    case scriptMay of 
        Right script -> do
            res <- liftInterpreter $ eval script
            case res of
                EvalFailure errs -> return $ ReplError errs
                EvalSuccess{compilationInfo=c} -> do
                    let sub = Global.sub c.state
                    let moduleName = show $ sub.thisPack.className c.state
                    replState <- Repl.get
                    Repl.put $ replState.{lastExternalScript=Just filePath}
                    return $ ReplSuccess $ "Loaded module " ++ moduleName
        Left err -> return $ ReplError [err]
        
evalScript Reload = do
    state <- Repl.get
    case state.lastExternalScript of
        Just url -> evalScript (Load url)
        Nothing -> return NoOutput --Nothing to reload 
           
evalScript (PasteScript script) = do
    res <- liftInterpreter $ eval script
    case res of
        EvalFailure errs -> return $ ReplError errs
        otherwise -> liftInterpreter $ do
            state <- Interpreter.get
            Interpreter.put $ state.{currentScript <- (++ newLine ++ script)}
            return NoOutput
            
evalScript  (Eval line) = do
      (evalInfo, res) <- liftInterpreter $ invokeShow line
      case res of
        Right value -> displayResult evalInfo value line
        Left errs -> return $ ReplError errs
        
evalScript History = do
    interpreterState <- liftInterpreter $ Interpreter.get
    return $ ReplSuccess interpreterState.currentScript
    
evalScript Reset = do
    Repl.put initReplState
    initInterpreterState <- liftIO initInterpreterState
    liftInterpreter $ Interpreter.put initInterpreterState
    return NoOutput

evalScript Paste = return NoOutput  
evalScript Quit = return NoOutput

ioException :: IOException -> Repl ReplResult    
ioException e = return $ ReplError [Throwable.getMessage e]

evalURL :: URL -> Repl ReplResult
evalURL url = do
    replState <- Repl.get
    let contents = fetch `catch` handleIOE
        fetch = urlContents url >>= (return . Right)
        handleIOE :: IOException -> IO (Either String Script)
        handleIOE ioe = return $ Left ioe.getMessage
    scriptMay <- liftIO contents
    case scriptMay of 
        Right script -> do
            res <- liftInterpreter $ eval script
            case res of
                EvalFailure errs -> return $ ReplError errs
                EvalSuccess{compilationInfo=c} -> do
                    let sub = Global.sub c.state
                    let moduleName = show $ sub.thisPack.className c.state
                    return . ReplSuccess $ "Loaded module " ++ moduleName
        Left err -> return $ ReplError [err]

handleMalformedURLException :: MalformedURLException -> Repl ReplResult   
handleMalformedURLException malformed = return $ ReplError [malformed.getMessage]

readPasteScript :: ConsoleReader -> String -> String -> Repl String
readPasteScript _ ":q" acc = return acc
readPasteScript console curr !acc = do
    line <- liftIO $ console.readLine ""
    readPasteScript console line (acc ++ newLine ++ curr)

getProps pack = do
    let p = Pack.new pack
    importClass Position.null p
    g <- getST
    case g.packages.lookup p of
        Nothing -> return []
        Just env -> return $ map (EU.label g) $ EU.symbols env
        
positionAndName a b = case Symbol.pos a <=> Symbol.pos b of
                                    Eq -> comparing (QName.base â€¢ Symbol.name) a b
                                    ne -> ne 
        
outlineModule pack g = fst $ State.run (getProps pack)  g  

help= intercalate newLine [
            "At the prompt, you can enter Frege code snippets to get them evaluated.",
            "The output or compilation errors will be printed below the prompt.",
            "In addition to Frege code, the following commands are supported:",
            indentHelp ":type <expression>" "To print the type of an expression",
            indentHelp  ":p" "To enter paste mode, for multi-line/multiple definitions",
            indentHelp  ":q" "To quit REPL or paste mode",
            indentHelp ":list" "To list the identifiers along with types",
            indentHelp ":history" "To display the scripts evaluated so far",
            indentHelp ":version" "To display Frege version",
            indentHelp  ":load url" "To load Frege code snippets from an URL",
            indentHelp ":r" "To reload the last script file",
            indentHelp ":reset" "To reset the session discarding all evaluated scripts",
            indentHelp ":help" "To display this help message"]

indentHelp :: String -> String -> String
indentHelp cmd desc = 
    let fmtcmd = cmd ++ (concat $ replicate (20 - cmd.length) " ")
    in fmtcmd ++ " - " ++ desc
  
displayResult :: EvalResult a -> String -> String -> Repl ReplResult
displayResult (EvalFailure errs) _  script = return $ ReplError errs
displayResult (EvalSuccess{symbolInfo=Just symInfo}) value script= return $ ReplSuccess value
displayResult _ value script = do
    s <- liftInterpreter $ Interpreter.get
    liftInterpreter . Interpreter.put $ s.{currentScript <- (++ newLine ++ script)}
    return NoOutput
 
runFile :: String -> Repl ()
runFile filePath = do
    scriptMay <- liftIO $ safeSlurp filePath
    case scriptMay of 
        Right script -> do
            res <- liftInterpreter $ eval script
            case res of
                EvalFailure errs -> liftIO $ println $ intercalate newLine errs
                EvalSuccess{compilationInfo=c} -> do
                    let sub = Global.sub c.state
                    let moduleName = show $ sub.thisPack.className c.state
                    liftIO $ invokeMain moduleName c.state.sub.loader
        Left err -> liftIO $ println err
        
safeSlurp :: String -> IO (Either String String)        
safeSlurp file = fetch file `catch` handleIOE where
        fetch file = fileContents file >>= (return . Right)
        handleIOE :: IOException -> IO (Either String String)
        handleIOE ioe = return $ Left ioe.getMessage         

data ConsoleReader = mutable native jline.console.ConsoleReader where
  native new :: () -> IO ConsoleReader throws IOException
  native readLine :: ConsoleReader -> String -> IO String throws IOException
  native readLine' readLine :: ConsoleReader -> IO String throws IOException
  native println :: ConsoleReader -> String -> IO () throws IOException
  native setPrompt :: ConsoleReader -> String -> IO ()
  native setExpandEvents :: ConsoleReader -> Bool -> IO ()
  
urlContents url = do
    inStream <- URL.openStream url
    scanner <- Scanner.new inStream
    scanner.useDelimiter "\\Z"
    scanner.next
    
fileContents filePath = do
    file <- File.new filePath
    scanner <- Scanner.fromFile file "utf-8"
    scanner.useDelimiter "\\Z"
    scanner.next

data Scanner = mutable native java.util.Scanner where
    native new :: InputStream -> IO Scanner
    native fromFile new :: MutableIO File -> String -> IO Scanner throws FileNotFoundException
    native useDelimiter :: Scanner -> String -> IO ()
    native next :: Scanner -> IO String   
    
runRepl repl state = evalStateT (Repl.un repl) state

pure native isEmpty :: String -> Bool

data Command = Version | Help | List (Maybe String) | Type String | Load String | Eval String | Paste | History | 
    PasteScript String | Reload | Reset | Skip | Quit where 
    
    parse   :: String -> Either String Command
    parse s = parse' $ trim s where
        parse' "" = Right Skip
        parse' #^:# = parseCommand s
        parse' script = Right $ Eval script
    
    parseType (Just "") = Left "Missing expression!"
    parseType (Just expr) = Right . Type $ expr
    parseType Nothing = Left "Missing expression!"
    
    parseLoad (Just "") = Left "Missing external script URL!"
    parseLoad (Just urlSpec) = Right . Load $ urlSpec
    parseLoad Nothing = Left "Missing external script URL!"
        
    parseCommand (m~#^:l\s+(.*)#) = parseLoad $ m.group 1
    parseCommand (m~#^:load\s+(.*)#) = parseLoad $ m.group 1
    parseCommand  ":version" = Right Version
    parseCommand ":help" = Right Help
    parseCommand (m~#:list\s(.*)#) = Right $ List $ m.group 1
    parseCommand ":list" = Right $ List Nothing
    parseCommand (m~#^:t\s+(.*)#) = parseType $ m.group 1
    parseCommand (m~#^:type\s+(.*)#) = parseType $ m.group 1
    parseCommand ":p" = Right Paste
    parseCommand ":history" = Right History
    parseCommand ":r" = Right Reload
    parseCommand ":reset" = Right Reset
    parseCommand ":q" = Right Quit
    parseCommand otherwise = Left "Invalid Command"
    
derive Eq Command
derive Show Command

initReplState :: ReplState
initReplState = ReplState Nothing
    
initInterpreterState :: IO InterpreterState 
initInterpreterState = do
  urlarr <- URLArray.new 0
  loader <- ClassLoader.current >>= URLClassLoader.new urlarr
  classes <- HashMap.new ()
  let history = ""
  let options = Options {moduleName = "script.Main"}
  let interpreterState = InterpreterState {
      loader = loader,
      classes = classes,
      options = options,
      history = [],
      currentScript = ""
  }
  return interpreterState

vmVendor = maybe "" id $ System.getProperty "java.vm.vendor"
vmName = maybe "" id $ System.getProperty "java.vm.name"
javaVersion = maybe "" id $ System.getProperty "java.version"

welcome = "Welcome to Frege " ++ version ++ " (" ++ vmVendor ++ " " ++ vmName ++
    ", " ++ javaVersion ++ ")"

printResult :: ConsoleReader -> ReplResult -> Repl ()
printResult console (ReplError errs) = liftIO $ console.println $ intercalate newLine errs
printResult console (ReplSuccess message) = liftIO $ console.println message
printResult _ NoOutput = return ()

main [file] = do
  interpreterState <- initInterpreterState
  runInterpreter (runRepl (runFile file) initReplState) interpreterState
main _ = do
  console <- ConsoleReader.new ()
  console.setPrompt "frege> "
  console.setExpandEvents false
  console.println welcome
  interpreterState <- initInterpreterState
  runInterpreter (runRepl (repl console) initReplState) interpreterState

  
