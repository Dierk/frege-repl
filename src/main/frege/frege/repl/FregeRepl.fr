module frege.repl.FregeRepl where

import frege.Version
import Java.Net
import Data.List
import Interpreter.FregeInterpreter
import Compiler.Utilities as U()
import Compiler.EclipseUtil as EU()
import Java.Swing (JFrame, invokeLater)
import Java.Awt (Component, ActionListener)
import Repl.Gui
import frege.Prelude hiding (print)
import frege.Prelude (print pPrint)

repl :: ConsoleReader -> ReplEnv -> IO ()
repl console env = do
  cmd <- read console env
  let res = eval cmd env
  print console cmd res
  loop console cmd res env

read :: ConsoleReader -> ReplEnv -> IO Command
read console state = do
   console.println ""
   line <- console.readLine state.prompt
   let readAgain = read console state
   case Command.parse line of
     Left err -> (console.println err) >> readAgain
     Right DefMulti -> readMultiline console >>= (return . Eval)
     Right Reload -> maybe readAgain (readExternal console state) state.lastExternalScript
     Right (Load path) -> readExternal console state path
     Right cmd -> return cmd

readExternal :: ConsoleReader -> ReplEnv -> String -> IO Command
readExternal console state (urlSpec@#.*?://.*#) = do
  url <- URL.new urlSpec
  let fetch = urlContents url >>= (return . Right)
      handleIOE (ioe :: IOException) = return $ Left ioe.getMessage
  script <- fetch `catch` handleIOE
  either (\err -> (console.println err) >> read console state)
    (return . LoadExternal urlSpec) script
readExternal console state filePath = do
   script <- safeSlurp filePath
   either (\err -> (console.println err) >> read console state)
                   (return . LoadExternal filePath) script

print :: ConsoleReader -> Command -> ReplResult -> IO ()
print console Java (ReplResult{out=EvalSuccess, messages=(Message _ javaSrc:_)})       = javaSourceGUI javaSrc
print console (HelpDoc src) (ReplResult{out=EvalSuccess, messages=(Message _ help:_)}) = helpGUI src help
print console _ (ReplResult{out=EvalError,messages=errs})               = console.println $ Message.showMessages errs
print console _ (ReplResult{out=Def,messages=msgs})                     = console.println $ Message.showMessages msgs
print console _ (ReplResult{out=ModuleDef moduleName,messages=msgs})    = do
  console.println $ "Loaded module: " ++ moduleName
  console.println $ Message.showMessages msgs
print console _ (ReplResult{out=EvalSuccess, messages=msgs})            = console.println $ Message.showMessages msgs
print console _
  (ReplResult{out=Interpret className var,env=state})          = do
      valEither <- fieldValue className var state.env.loader
      console.println $ maybe "undefined" id valEither
  `catch` (println . showThrowableCause)
print _ _ _                                                    = return ()

loop :: ConsoleReader -> Command -> ReplResult -> ReplEnv -> IO ()
loop console Quit _ _ = return ()
loop console (Eval _) (ReplResult (Interpret _ _) newState _) state =
  repl console state.{lastJavaSource=newState.lastJavaSource}
loop console _ (ReplResult _ newState _) state = repl console newState

eval (Eval line) state = interpret line state
eval (Type expr) state = typeof expr state
eval (LoadExternal src script) state = ReplResult interpResult.out newState interpResult.messages where
  interpResult = interpret script state
  newState = interpResult.env.{lastExternalScript=Just src}
eval (BrowseModule moduleName) state = browseModule moduleName state
eval Browse state = browse state
eval (HelpDoc name) state = docHelp name state
eval Java state = javaSource state
eval History state = history state
eval Reset _ = ReplResult EvalNoOutput ReplEnv.default []
eval Version state = ReplResult EvalSuccess state [Message INFO version]
eval Help state = ReplResult EvalSuccess state [Message INFO help]
eval _ state = ReplResult EvalNoOutput state []

javaSource state = ReplResult res state msgs where
 (res, msgs) = maybe (EvalNoOutput, [Message INFO ""]) (\m -> (EvalSuccess, [Message INFO m])) state.lastJavaSource

history state = ReplResult EvalSuccess state [Message INFO . unlines . reverse $ state.env.predefs]

readMultiline :: ConsoleReader -> IO String
readMultiline console = intercalate newLine . reverse <$> f [] where
  f acc = do
    line <- console.readLine ""
    if (line == ":}")
      then return acc
      else f (line : acc)


cmdHelp = [(":type <expression>", "Display the type of an expression."),
            (":browse <module name>", "Display the names in a module if " ++
                "a module name is provided otherwise display the names in the default REPL module."),
            (":load <url or file>", "Load Frege code snippets from an URL or file."),
            (":java", "View Java translation of last compiled Frege source."),
            (":r", "Reload the last script file."),
            (":history", "Display the source history for definitions in the default REPL module."),
            (":reset", "Reset the session discarding all evaluated scripts."),
            (":version", "Display Frege version."),
            (":{", "Start multiline definitions."),
            (":}", "End multiline defintions."),
            (":help <name>", "Display the documentation for the given name." ++
                            " If the name is not provided, display this help message."),
            (":q or :quit", "Quit REPL")]

f `on` g = \x \y -> f (g x) (g y)

renderCmdHelp cmdHelp = map render cmdHelp where
    maxLeftIndent = length . fst $ maximumBy (compare `on` (length . fst)) cmdHelp
    indent cmd desc width = cmd ++ (concat $ replicate (width - cmd.length) " ") ++
        " - " ++ desc
    render (cmd, desc) = indent cmd desc maxLeftIndent

help = intercalate newLine $ header ++ body where
    header = ["At the prompt, you can enter Frege code snippets to get them evaluated.",
            "The output or compilation errors will be printed below the prompt.",
            "In addition to Frege code, the following commands are supported:\n"]
    body = renderCmdHelp cmdHelp


safeSlurp :: String -> IO (String | String)
safeSlurp file = fetch file `catch` handleIOE where
        fetch file = fileContents file >>= (return . Right)
        handleIOE :: IOException -> IO (Either String String)
        handleIOE ioe = return $ Left ioe.getMessage

data ConsoleReader = mutable native jline.console.ConsoleReader where
  native new :: () -> IO ConsoleReader throws IOException
  native readLine :: ConsoleReader -> String -> IO String throws IOException
  native readLine' readLine :: ConsoleReader -> IO String throws IOException
  native println :: ConsoleReader -> String -> IO () throws IOException
  native setPrompt :: ConsoleReader -> String -> IO ()
  native setExpandEvents :: ConsoleReader -> Bool -> IO ()

urlContents url = do
    inStream <- URL.openStream url
    scanner <- Scanner.new inStream
    scanner.useDelimiter "\\Z"
    scanner.next `finally` scanner.close

fileContents filePath = do
    file <- File.new filePath
    scanner <- Scanner.fromFile file "utf-8"
    scanner.useDelimiter "\\Z"
    scanner.next `finally` scanner.close

data Scanner = mutable native java.util.Scanner where
    native new :: InputStream -> IO Scanner
    native fromFile new :: MutableIO File -> String -> IO Scanner throws FileNotFoundException
    native useDelimiter :: Scanner -> String -> IO ()
    native next :: Scanner -> IO String

javaSourceGUI :: String -> IO ()
javaSourceGUI javaSource = do
   frame::JFrame <- JFrame.new "Java Source"
   newContentPane::JPanel <- BorderLayout.new () >>= JPanel.new
   frame.setDefaultCloseOperation JFrame.dispose_on_close
   editor::JEditorPane <- JEditorPane.new "text/plain" javaSource
   editor.setEditable false
   scrollPane <- JScrollPane.new editor
   dimension <- Dimension.new 600 600
   JComponent.setPreferredSize scrollPane dimension
   Container.add newContentPane scrollPane (asObject BorderLayout.center)
   frame.setContentPane newContentPane
   frame.pack
   frame.setVisible true


helpGUI :: String -> String -> IO ()
helpGUI title content = do
    frame <- JFrame.new (title ++ " - Documentation")
    frame.setDefaultCloseOperation JFrame.dispose_on_close
    newContentPane:: JPanel <- BorderLayout.new () >>= JPanel.new
    let html :: String
        html = substring content $ indexOf content "<HTML>" -- Skip DOCTYPE
    editor::JEditorPane <- JEditorPane.new "text/html" html
    editor.setEditable false
    helpLinksListener <- FregeJavaProxy.with showDesktop HyperlinkListener.clazz
    editor.addHyperlinkListener helpLinksListener
    scrollPane <- JScrollPane.new editor
    dimension <- Dimension.new 600 600
    JComponent.setPreferredSize scrollPane dimension
    Container.add newContentPane scrollPane (asObject BorderLayout.center)
    newContentPane.setOpaque true
    frame.setContentPane newContentPane
    frame.pack
    frame.setVisible true

data FregeJavaProxy = pure native frege.memoryjavac.FregeJavaProxy where
  native with frege.memoryjavac.FregeJavaProxy.with :: (Object -> Method -> ObjectArr -> ST s a) -> Class c -> IO c

showDesktop :: Object -> Method -> ObjectArr -> IO ()
showDesktop _ _ args = do
  event <- return $ asHyperlinkEvent $ args.elemAt 0
  d <- Desktop.getDesktop ()
  desktopSupported <- d.isDesktopSupported
  let url = HyperlinkEvent.getURL event
      navigateRelative = either throw d.browse . URI.new $ fixHelpLink event.getDescription
      navigate = maybe navigateRelative (\u -> toURI u >>= d.browse) url
  when (event.getEventType == HyperlinkEvent_EventType.activated) navigate


fixHelpLink s | Just (Just relative : _)
                  <- s `match` #^\.\.(.*)$# = "http://try.frege-lang.org/doc/frege" ++ relative
fixHelpLink s = s

native toURI :: URL -> ST s URI throws URISyntaxException
pure native asObject "(java.lang.Object)" :: a -> Object


pure native isEmpty :: String -> Bool
pure native replaceAll :: String -> String -> String -> String
pure native indexOf :: String -> String -> Int
pure native substring :: String -> Int -> String
                         | String -> Int -> Int -> String

data Command = Version | Help | HelpDoc String | Browse |
    BrowseModule String | Type String | Load String | LoadExternal String String | Eval String |
    Java | DefMulti | History | Reload | Reset | Skip | Quit where

    parse   :: String -> Either String Command
    parse s = parse' $ trim s where
        parse' "" = Right Skip
        parse' #^:# = parseCommand s
        parse' script = Right $ Eval script

    parseCommand s | Just (Just moduleName : _) <- s `match` #:browse\s+(.*)# = Right $ BrowseModule moduleName
    parseCommand s | Just (Just path : _) <- s `match` #^:l.*?\s+(.*)# = Right $ Load path
    parseCommand s | Just (Just src : _) <- s `match` #:help\s+(.*)# = Right $ HelpDoc src
    parseCommand s | Just (Just expr : _) <- s `match` #^:t.*?\s+(.*)# = Right $ Type expr
    parseCommand  ":version" = Right Version
    parseCommand ":browse" = Right $ Browse
    parseCommand ":{" = Right DefMulti
    parseCommand ":history" = Right History
    parseCommand ":java" = Right Java
    parseCommand ":r" = Right Reload
    parseCommand ":reset" = Right Reset
    parseCommand ":q" = Right Quit
    parseCommand ":quit" = Right Quit
    parseCommand ":help" = Right Help
    parseCommand otherwise = Left "Invalid Command"

derive Eq Command
derive Show Command

vmVendor = maybe "" id $ System.getProperty "java.vm.vendor"
vmName = maybe "" id $ System.getProperty "java.vm.name"
javaVersion = maybe "" id $ System.getProperty "java.version"

pure native toString :: Object -> String
pure native trim :: String -> String

welcome = "Welcome to Frege " ++ version ++ " (" ++ vmVendor ++ " " ++ vmName ++
    ", " ++ javaVersion ++ ")"

main _ = do
  console <- ConsoleReader.new ()
  console.setPrompt ReplEnv.default.prompt
  console.setExpandEvents false
  console.println welcome
  repl console ReplEnv.default
  System.exit 0
